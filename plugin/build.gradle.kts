/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.2/userguide/custom_plugins.html
 */

plugins {
    // Plugin publication plugin.
    id("com.gradle.plugin-publish") version "0.13.0"

    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    `java-gradle-plugin`

    id("com.github.minigdx.gradle.plugin.developer.jvm") version "1.0.0"
}

repositories {
    gradlePluginPortal()
}
dependencies {
    implementation(platform("me.champeau.jdoctor:jdoctor-bom:0.1"))
    implementation("me.champeau.jdoctor:jdoctor-core")
    implementation("me.champeau.jdoctor:jdoctor-utils:0.1")

    api("org.jetbrains.kotlin.multiplatform:org.jetbrains.kotlin.multiplatform.gradle.plugin:1.4.20")
    api("com.github.minigdx.gradle.plugin.gltf:com.github.minigdx.gradle.plugin.gltf.gradle.plugin:1.0.0")
}

gradlePlugin {
    // Define the plugin
    val common by plugins.creating {
        id = "com.github.minigdx.common"
        implementationClass = "com.github.minigdx.gradle.plugin.MiniGdxCommonGradlePlugin"
    }
    val jvm by plugins.creating {
        id = "com.github.minigdx.jvm"
        implementationClass = "com.github.minigdx.gradle.plugin.MiniGdxJvmGradlePlugin"
    }

    val js by plugins.creating {
        id = "com.github.minigdx.js"
        implementationClass = "com.github.minigdx.gradle.plugin.MiniGdxJsGradlePlugin"
    }
}

pluginBundle {
    website = "https://github.com/minigdx/minigdx-gradle-plugin"
    vcsUrl = "https://github.com/minigdx/minigdx-gradle-plugin"

    (plugins) {
        // first plugin
        "common" {
            // id is captured from java-gradle-plugin configuration
            displayName = "MiniGDX plugin"
            description =
                """Configure your gradle project for creating a minigdx game.""".trimMargin()
            tags = listOf("minigdx")
        }

        "jvm" {
            displayName = "MiniGDX Kotlin JVM Developer plugin"
            description =
                """Configure your gradle project for creating a minigdx game that target the JVM platform.""".trimMargin()
            tags = listOf("minigdx", "kotlin", "jvm")
        }

        "js" {
            displayName = "MiniGDX Kotlin Multiplatform Developer plugin"
            description =
                """Configure your gradle project for creating a minigdx game that target the web platform.
            """.trimMargin()
            tags = listOf("minigdx", "kotlin", "js")
        }
    }
}

// Add a source set for the functional test suite
val functionalTestSourceSet = sourceSets.create("functionalTest") {
}

gradlePlugin.testSourceSets(functionalTestSourceSet)
configurations["functionalTestImplementation"].extendsFrom(configurations["testImplementation"])

// Add a task to run the functional tests
val functionalTest by tasks.registering(Test::class) {
    testClassesDirs = functionalTestSourceSet.output.classesDirs
    classpath = functionalTestSourceSet.runtimeClasspath
}

tasks.check {
    // Run the functional tests as part of `check`
    dependsOn(functionalTest)
}
