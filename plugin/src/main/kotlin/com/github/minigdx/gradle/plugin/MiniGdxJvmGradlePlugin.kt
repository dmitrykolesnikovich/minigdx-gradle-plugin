/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.github.minigdx.gradle.plugin

import com.github.minigdx.gradle.plugin.internal.MiniGdxPlatform
import com.github.minigdx.gradle.plugin.internal.checkCommonPlugin
import com.github.minigdx.gradle.plugin.internal.createDir
import org.gradle.api.Plugin
import org.gradle.api.Project

/**
 * A simple 'hello world' plugin.
 */
class MiniGdxJvmGradlePlugin : Plugin<Project> {

    override fun apply(project: Project) {
        project.checkCommonPlugin(MiniGdxPlatform.JVM)

        configureMiniGdxDependencies(project)
        configureSourceSets(project)
        // TODO:
        //   configure task to create a templated game
        //   configure task to run application
        //   configure task to bundle fat jar
        //   configure task to bundle app+jvm ?
        //   configure pipeline pour github ?
        //   configure build chain to get java 11 and jpackage
        //   https://walczak.it/blog/distributing-javafx-desktop-applications-without-requiring-jvm-using-jlink-and-jpackage
    }

    private fun configureSourceSets(project: Project) {
        project.createDir("src/jvmMain/kotlin")
        project.createDir("src/jvmTest/kotlin")
    }

    private fun configureMiniGdxDependencies(project: Project) {
        project.afterEvaluate {
            project.dependencies.add("jvmMainImplementation", "com.github.minigdx:minigdx-jvm:DEV-SNAPSHOT")
        }
    }

    private fun configureTasks(project: Project) {
        val className = "" // FIXME: Prendre deplus l'extension
        /*
        project.tasks.register("bundle-jar", Jar::class.java) { jar ->
            jar.group = "minigdx"
            jar.description = "Create a bundle as a Fat jar."

            jar.archiveFileName.set("${project.rootProject.name}-jvm.jar")

            jar.doFirst {
                jar.from(project.files(sourceSets.getByName("main").output.classesDirs))
                jar.from(project.files(sourceSets.getByName("main").output.resourcesDir))

                val files = project.files(sourceSets.getByName("main").runtimeClasspath)
                jar.from(files.filter { f -> f.exists() }.map { f -> if (f.isDirectory) f else project.zipTree(f) })

                jar.from(project.files(exts.assetsDirectory.orNull ?: project.tryFindAssetsDirectory()))
                jar.manifest { m -> m.attributes(mapOf("Main-Class" to (mainClass))) }
            }



            jar.dependsOn("build")
        }

         */
    }
}
